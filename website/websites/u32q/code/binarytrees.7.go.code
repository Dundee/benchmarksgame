<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://benchmarksgame.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by The Go Authors.</span>
<span class="hl com"> * based on C program by Kevin Carson</span>
<span class="hl com"> * flag.Arg hack by Isaac Gouy</span>
<span class="hl com"> * slice based binary tree by Jakob Borg</span>
<span class="hl com"> * channel based parallellism by Jakob Borg</span>
<span class="hl com"> */</span>

<span class="hl kwa">package</span> main

<span class="hl kwa">import</span> <span class="hl opt">(</span>
   <span class="hl str">&quot;flag&quot;</span>
   <span class="hl str">&quot;fmt&quot;</span>
   <span class="hl str">&quot;runtime&quot;</span>
   <span class="hl str">&quot;strconv&quot;</span>
<span class="hl opt">)</span>

<span class="hl kwa">var</span> n <span class="hl opt">=</span> <span class="hl num">0</span>

<span class="hl kwa">type</span> Node <span class="hl kwa">struct</span> <span class="hl opt">{</span>
   value       <span class="hl kwb">int</span>
   hasChildren <span class="hl kwb">bool</span>
<span class="hl opt">}</span>

<span class="hl kwa">type</span> Tree <span class="hl opt">[]</span>Node

<span class="hl kwa">func</span> <span class="hl kwd">bottomUpTree</span><span class="hl opt">(</span>item<span class="hl opt">,</span> depth <span class="hl kwb">int</span><span class="hl opt">)</span> Tree <span class="hl opt">{</span>
   t <span class="hl opt">:=</span> <span class="hl kwb">make</span><span class="hl opt">(</span>Tree<span class="hl opt">,</span> <span class="hl num">1</span><span class="hl opt">&lt;&lt;</span><span class="hl kwb">uint</span><span class="hl opt">(</span>depth<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">))</span>
   t<span class="hl opt">.</span><span class="hl kwd">setNodes</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> item<span class="hl opt">,</span> depth<span class="hl opt">)</span>
   <span class="hl kwa">return</span> t
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl opt">(</span>t Tree<span class="hl opt">)</span> <span class="hl kwd">setNodes</span><span class="hl opt">(</span>idx<span class="hl opt">,</span> item<span class="hl opt">,</span> depth <span class="hl kwb">int</span><span class="hl opt">) {</span>
   t<span class="hl opt">[</span>idx<span class="hl opt">].</span>value <span class="hl opt">=</span> item
   <span class="hl kwa">if</span> depth <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">{</span>
      t<span class="hl opt">[</span>idx<span class="hl opt">].</span>hasChildren <span class="hl opt">=</span> <span class="hl kwb">true</span>
      t<span class="hl opt">.</span><span class="hl kwd">setNodes</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>idx<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">*</span>item<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">,</span> depth<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
      t<span class="hl opt">.</span><span class="hl kwd">setNodes</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>idx<span class="hl opt">+</span><span class="hl num">2</span><span class="hl opt">,</span> <span class="hl num">2</span><span class="hl opt">*</span>item<span class="hl opt">,</span> depth<span class="hl opt">-</span><span class="hl num">1</span><span class="hl opt">)</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl opt">(</span>t Tree<span class="hl opt">)</span> <span class="hl kwd">itemCheck</span><span class="hl opt">()</span> <span class="hl kwb">int</span> <span class="hl opt">{</span>
   <span class="hl kwa">return</span> t<span class="hl opt">.</span><span class="hl kwd">itemCheckIdx</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">)</span>
<span class="hl opt">}</span>

<span class="hl kwa">func</span> <span class="hl opt">(</span>t Tree<span class="hl opt">)</span> <span class="hl kwd">itemCheckIdx</span><span class="hl opt">(</span>idx <span class="hl kwb">int</span><span class="hl opt">)</span> <span class="hl kwb">int</span> <span class="hl opt">{</span>
   <span class="hl kwa">if</span> <span class="hl opt">!</span>t<span class="hl opt">[</span>idx<span class="hl opt">].</span>hasChildren <span class="hl opt">{</span>
      <span class="hl kwa">return</span> t<span class="hl opt">[</span>idx<span class="hl opt">].</span>value
   <span class="hl opt">}</span>
   <span class="hl kwa">return</span> t<span class="hl opt">[</span>idx<span class="hl opt">].</span>value <span class="hl opt">+</span> t<span class="hl opt">.</span><span class="hl kwd">itemCheckIdx</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>idx<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">) -</span> t<span class="hl opt">.</span><span class="hl kwd">itemCheckIdx</span><span class="hl opt">(</span><span class="hl num">2</span><span class="hl opt">*</span>idx<span class="hl opt">+</span><span class="hl num">2</span><span class="hl opt">)</span>
<span class="hl opt">}</span>

<span class="hl kwa">const</span> minDepth <span class="hl opt">=</span> <span class="hl num">4</span>

<span class="hl kwa">func</span> <span class="hl kwd">main</span><span class="hl opt">() {</span>
   <span class="hl kwa">var</span> parallell <span class="hl opt">=</span> runtime<span class="hl opt">.</span><span class="hl kwd">NumCPU</span><span class="hl opt">() *</span> <span class="hl num">2</span>
   runtime<span class="hl opt">.</span><span class="hl kwd">GOMAXPROCS</span><span class="hl opt">(</span>parallell<span class="hl opt">)</span>

   flag<span class="hl opt">.</span><span class="hl kwd">Parse</span><span class="hl opt">()</span>
   <span class="hl kwa">if</span> flag<span class="hl opt">.</span><span class="hl kwd">NArg</span><span class="hl opt">() &gt;</span> <span class="hl num">0</span> <span class="hl opt">{</span>
      n<span class="hl opt">,</span> _ <span class="hl opt">=</span> strconv<span class="hl opt">.</span><span class="hl kwd">Atoi</span><span class="hl opt">(</span>flag<span class="hl opt">.</span><span class="hl kwd">Arg</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">))</span>
   <span class="hl opt">}</span>

   maxDepth <span class="hl opt">:=</span> n
   <span class="hl kwa">if</span> minDepth<span class="hl opt">+</span><span class="hl num">2</span> <span class="hl opt">&gt;</span> n <span class="hl opt">{</span>
      maxDepth <span class="hl opt">=</span> minDepth <span class="hl opt">+</span> <span class="hl num">2</span>
   <span class="hl opt">}</span>
   stretchDepth <span class="hl opt">:=</span> maxDepth <span class="hl opt">+</span> <span class="hl num">1</span>

   check <span class="hl opt">:=</span> <span class="hl kwd">bottomUpTree</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> stretchDepth<span class="hl opt">).</span><span class="hl kwd">itemCheck</span><span class="hl opt">()</span>
   fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;stretch tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> stretchDepth<span class="hl opt">,</span> check<span class="hl opt">)</span>

   longLivedTree <span class="hl opt">:=</span> <span class="hl kwd">bottomUpTree</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> maxDepth<span class="hl opt">)</span>

   <span class="hl kwa">var</span> res <span class="hl opt">=</span> <span class="hl kwb">make</span><span class="hl opt">([]</span><span class="hl kwa">chan</span> <span class="hl kwb">int</span><span class="hl opt">,</span> parallell<span class="hl opt">)</span>
   <span class="hl kwa">for</span> j <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> parallell<span class="hl opt">;</span> j<span class="hl opt">++ {</span>
      res<span class="hl opt">[</span>j<span class="hl opt">] =</span> <span class="hl kwb">make</span><span class="hl opt">(</span><span class="hl kwa">chan</span> <span class="hl kwb">int</span><span class="hl opt">)</span>
   <span class="hl opt">}</span>

   <span class="hl kwa">for</span> depth <span class="hl opt">:=</span> minDepth<span class="hl opt">;</span> depth <span class="hl opt">&lt;=</span> maxDepth<span class="hl opt">;</span> depth <span class="hl opt">+=</span> <span class="hl num">2</span> <span class="hl opt">{</span>
      iterations <span class="hl opt">:=</span> <span class="hl num">1</span> <span class="hl opt">&lt;&lt;</span> <span class="hl kwb">uint</span><span class="hl opt">(</span>maxDepth<span class="hl opt">-</span>depth<span class="hl opt">+</span>minDepth<span class="hl opt">)</span>

      <span class="hl kwa">for</span> j <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> parallell<span class="hl opt">;</span> j<span class="hl opt">++ {</span>
         <span class="hl kwa">go func</span><span class="hl opt">(</span>j <span class="hl kwb">int</span><span class="hl opt">) {</span>
            c <span class="hl opt">:=</span> <span class="hl num">0</span>
            <span class="hl kwa">for</span> i <span class="hl opt">:=</span> j<span class="hl opt">;</span> i <span class="hl opt">&lt;=</span> iterations<span class="hl opt">;</span> i <span class="hl opt">+=</span> parallell <span class="hl opt">{</span>
               c <span class="hl opt">+=</span> <span class="hl kwd">bottomUpTree</span><span class="hl opt">(</span>i<span class="hl opt">,</span> depth<span class="hl opt">).</span><span class="hl kwd">itemCheck</span><span class="hl opt">()</span>
               c <span class="hl opt">+=</span> <span class="hl kwd">bottomUpTree</span><span class="hl opt">(-</span>i<span class="hl opt">,</span> depth<span class="hl opt">).</span><span class="hl kwd">itemCheck</span><span class="hl opt">()</span>
            <span class="hl opt">}</span>
            res<span class="hl opt">[</span>j<span class="hl opt">] &lt;-</span> c
         <span class="hl opt">}(</span>j<span class="hl opt">)</span>
      <span class="hl opt">}</span>

      check <span class="hl opt">=</span> <span class="hl num">0</span>
      <span class="hl kwa">for</span> j <span class="hl opt">:=</span> <span class="hl num">0</span><span class="hl opt">;</span> j <span class="hl opt">&lt;</span> parallell<span class="hl opt">;</span> j<span class="hl opt">++ {</span>
         check <span class="hl opt">+= &lt;-</span>res<span class="hl opt">[</span>j<span class="hl opt">]</span>
      <span class="hl opt">}</span>

      fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;%d</span><span class="hl esc">\t</span> <span class="hl str">trees of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> iterations<span class="hl opt">*</span><span class="hl num">2</span><span class="hl opt">,</span> depth<span class="hl opt">,</span> check<span class="hl opt">)</span>
   <span class="hl opt">}</span>
   fmt<span class="hl opt">.</span><span class="hl kwd">Printf</span><span class="hl opt">(</span><span class="hl str">&quot;long lived tree of depth %d</span><span class="hl esc">\t</span> <span class="hl str">check: %d</span><span class="hl esc">\n</span><span class="hl str">&quot;</span><span class="hl opt">,</span> maxDepth<span class="hl opt">,</span> longLivedTree<span class="hl opt">.</span><span class="hl kwd">itemCheck</span><span class="hl opt">())</span>
<span class="hl opt">}</span>
