<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> * original contributed by Kenneth Jonsson</span>
<span class="hl com"> * small optimizations by Mark Hammons</span>
<span class="hl com"> */</span>

<span class="hl kwa">import</span> scala<span class="hl opt">.</span>actors<span class="hl opt">.</span>Futures<span class="hl opt">.</span>_

<span class="hl kwa">class</span> <span class="hl kwd">RowCalc</span><span class="hl opt">(</span>size<span class="hl opt">:</span> Int<span class="hl opt">) {</span>
  <span class="hl kwa">val</span> maxIterations <span class="hl opt">=</span> <span class="hl num">50</span>
  <span class="hl kwa">val</span> limitSquared <span class="hl opt">=</span> <span class="hl num">4.0</span>
  <span class="hl kwa">val</span> bytesPerRow <span class="hl opt">= (</span>size <span class="hl opt">+</span> <span class="hl num">7</span><span class="hl opt">) &gt;&gt;</span> <span class="hl num">3</span>
  <span class="hl kwa">val</span> cib <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Double<span class="hl opt">](</span>size <span class="hl opt">+</span> <span class="hl num">7</span><span class="hl opt">)</span>
  <span class="hl kwa">val</span> crb <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Double<span class="hl opt">](</span>size <span class="hl opt">+</span> <span class="hl num">7</span><span class="hl opt">)</span>

  <span class="hl kwc">&#64;inline</span> <span class="hl kwa">private def</span> <span class="hl kwd">instantiateArrays</span><span class="hl opt">(</span>i<span class="hl opt">:</span> Int<span class="hl opt">,</span> c<span class="hl opt">:</span> Double<span class="hl opt">) {</span>
    <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> size <span class="hl opt">+</span> <span class="hl num">7</span><span class="hl opt">) {</span>
      <span class="hl kwd">cib</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> i<span class="hl opt">*</span>c<span class="hl opt">-</span><span class="hl num">1.0</span>
      <span class="hl kwd">crb</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> i<span class="hl opt">*</span>c<span class="hl opt">-</span><span class="hl num">1.5</span>
      <span class="hl kwd">instantiateArrays</span><span class="hl opt">(</span>i<span class="hl opt">+</span><span class="hl num">1</span><span class="hl opt">,</span>c<span class="hl opt">)</span>
    <span class="hl opt">}</span> <span class="hl kwa">else return</span>
  <span class="hl opt">}</span>

  <span class="hl kwd">instantiateArrays</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">,</span> <span class="hl num">2.0</span><span class="hl opt">/</span>size<span class="hl opt">)</span>

  <span class="hl kwc">&#64;inline</span> <span class="hl kwa">final def</span> <span class="hl kwd">square</span><span class="hl opt">(</span>d<span class="hl opt">:</span> Double<span class="hl opt">) =</span> d<span class="hl opt">*</span>d

  <span class="hl kwa">final def</span> <span class="hl kwd">calcRow</span><span class="hl opt">(</span>rowNum<span class="hl opt">:</span> Int<span class="hl opt">):</span> Array<span class="hl opt">[</span>Byte<span class="hl opt">] = {</span>
    <span class="hl kwa">val</span> rowBitmap <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Byte<span class="hl opt">](</span>bytesPerRow<span class="hl opt">)</span>

    <span class="hl kwa">val</span> ci <span class="hl opt">=</span> <span class="hl kwd">cib</span><span class="hl opt">(</span>rowNum<span class="hl opt">)</span>

    <span class="hl kwc">&#64;inline</span> <span class="hl kwa">def</span> <span class="hl kwd">outerLoop</span><span class="hl opt">(</span>column<span class="hl opt">:</span> Int<span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>column <span class="hl opt">&lt;</span> size<span class="hl opt">) {</span>
        <span class="hl kwa">val</span> cr <span class="hl opt">=</span> <span class="hl kwd">crb</span><span class="hl opt">(</span>column<span class="hl opt">)</span>

        <span class="hl kwc">&#64;inline</span> <span class="hl kwa">def</span> <span class="hl kwd">innerLoop</span><span class="hl opt">(</span>i<span class="hl opt">:</span>Double <span class="hl opt">=</span> ci<span class="hl opt">,</span> r<span class="hl opt">:</span> Double <span class="hl opt">=</span> cr<span class="hl opt">,</span> iterations<span class="hl opt">:</span> Int<span class="hl opt">) {</span>
          <span class="hl kwa">val</span> sr <span class="hl opt">=</span> <span class="hl kwd">square</span><span class="hl opt">(</span>r<span class="hl opt">)</span>
          <span class="hl kwa">val</span> si <span class="hl opt">=</span> <span class="hl kwd">square</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
          <span class="hl kwa">if</span><span class="hl opt">(</span>sr <span class="hl opt">+</span> si <span class="hl opt">&gt;</span> limitSquared<span class="hl opt">)</span>
            <span class="hl kwa">return</span>
          <span class="hl kwa">else if</span><span class="hl opt">(</span>iterations <span class="hl opt">&gt;=</span> maxIterations<span class="hl opt">) {</span>
            <span class="hl kwd">rowBitmap</span><span class="hl opt">(</span>column <span class="hl opt">&gt;&gt;</span> <span class="hl num">3</span><span class="hl opt">) = (</span><span class="hl kwd">rowBitmap</span><span class="hl opt">(</span>column <span class="hl opt">&gt;&gt;</span> <span class="hl num">3</span><span class="hl opt">)</span>
                      <span class="hl opt">| (</span><span class="hl num">0x80</span> <span class="hl opt">&gt;&gt; (</span>column <span class="hl opt">&amp;</span> <span class="hl num">7</span><span class="hl opt">))).</span>toByte
          <span class="hl opt">}</span> <span class="hl kwa">else</span>
            <span class="hl kwd">innerLoop</span><span class="hl opt">(</span><span class="hl num">2.0</span> <span class="hl opt">*</span> r <span class="hl opt">*</span> i <span class="hl opt">+</span> ci<span class="hl opt">,</span> sr <span class="hl opt">-</span> si <span class="hl opt">+</span> cr<span class="hl opt">,</span> iterations <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl opt">}</span>

        <span class="hl kwd">innerLoop</span><span class="hl opt">(</span>iterations <span class="hl opt">=</span> <span class="hl num">1</span><span class="hl opt">)</span>
        <span class="hl kwd">outerLoop</span><span class="hl opt">(</span>column <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">)</span>
      <span class="hl opt">}</span> <span class="hl kwa">else return</span>
    <span class="hl opt">}</span>

    <span class="hl kwd">outerLoop</span><span class="hl opt">(</span>column <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">)</span>

    rowBitmap
  <span class="hl opt">}</span>
<span class="hl opt">}</span>


<span class="hl kwa">object</span> mandelbrot <span class="hl opt">{</span>
  <span class="hl kwa">val</span> numProcessors <span class="hl opt">=</span> Runtime<span class="hl opt">.</span>getRuntime<span class="hl opt">.</span>availableProcessors

  <span class="hl kwa">def</span> <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">:</span> Array<span class="hl opt">[</span>String<span class="hl opt">]) {</span>
    <span class="hl kwa">val</span> size <span class="hl opt">=</span> <span class="hl kwd">args</span><span class="hl opt">(</span><span class="hl num">0</span><span class="hl opt">).</span>toInt
    <span class="hl kwa">val</span> calcTo <span class="hl opt">=</span> size<span class="hl opt">/</span><span class="hl num">2</span> <span class="hl opt">+</span> <span class="hl num">1</span>
    <span class="hl kwa">val</span> rowCalc <span class="hl opt">=</span> <span class="hl kwa">new</span> <span class="hl kwd">RowCalc</span><span class="hl opt">(</span>size<span class="hl opt">)</span>
    <span class="hl kwa">val</span> bitmap <span class="hl opt">=</span> <span class="hl kwa">new</span> Array<span class="hl opt">[</span>Array<span class="hl opt">[</span>Byte<span class="hl opt">]](</span>calcTo<span class="hl opt">)</span>

    <span class="hl kwa">def</span> <span class="hl kwd">futureHelper</span><span class="hl opt">(</span>i<span class="hl opt">:</span> Int<span class="hl opt">) {</span>
      <span class="hl kwa">if</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;</span> calcTo<span class="hl opt">) {</span>
        <span class="hl kwa">val</span> bytes <span class="hl opt">=</span> rowCalc<span class="hl opt">.</span><span class="hl kwd">calcRow</span><span class="hl opt">(</span>i<span class="hl opt">)</span>
        <span class="hl kwd">bitmap</span><span class="hl opt">(</span>i<span class="hl opt">) =</span> bytes
        <span class="hl kwd">futureHelper</span><span class="hl opt">(</span>i<span class="hl opt">+</span>numProcessors<span class="hl opt">)</span>
      <span class="hl opt">}</span> <span class="hl kwa">else return</span>
    <span class="hl opt">}</span>

    <span class="hl kwa">val</span> futures <span class="hl opt">= (</span><span class="hl kwa">for</span> <span class="hl opt">(</span>i <span class="hl opt">&lt;-</span> <span class="hl num">0</span> until numProcessors<span class="hl opt">)</span> <span class="hl kwa">yield</span>
      future<span class="hl opt">{</span><span class="hl kwd">futureHelper</span><span class="hl opt">(</span>i<span class="hl opt">)}</span>
    <span class="hl opt">)</span>

    <span class="hl kwd">println</span><span class="hl opt">(</span><span class="hl str">&quot;P4</span><span class="hl esc">\n</span><span class="hl str">&quot;</span> <span class="hl opt">+</span> size <span class="hl opt">+</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt">+</span> size<span class="hl opt">)</span>

    futures<span class="hl opt">.</span><span class="hl kwd">foreach</span><span class="hl opt">(</span><span class="hl kwd">_</span><span class="hl opt">())</span>
    <span class="hl opt">(</span>bitmap <span class="hl opt">++ (</span><span class="hl kwa">if</span><span class="hl opt">(</span>size <span class="hl opt">%</span> <span class="hl num">2</span> <span class="hl opt">==</span> <span class="hl num">0</span><span class="hl opt">)</span> bitmap<span class="hl opt">.</span>tail<span class="hl opt">.</span>reverse<span class="hl opt">.</span>tail
      <span class="hl kwa">else</span> bitmap<span class="hl opt">.</span>tail<span class="hl opt">.</span>reverse<span class="hl opt">)).</span><span class="hl kwd">foreach</span><span class="hl opt">(</span>row <span class="hl opt">=&gt;</span> System<span class="hl opt">.</span>out<span class="hl opt">.</span><span class="hl kwd">write</span><span class="hl opt">(</span>row<span class="hl opt">))</span>
  <span class="hl opt">}</span>
<span class="hl opt">}</span>
