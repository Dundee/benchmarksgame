<span class="hl slc">% ----------------------------------------------------------------------</span>
<span class="hl slc">% The Computer Language Benchmarks Game  </span>
<span class="hl slc">% http://shootout.alioth.debian.org/</span>
<span class="hl slc">%</span>
<span class="hl slc">% Contributed by Anthony Borla [with thanks to Kevin Glynn]</span>
<span class="hl slc">% Further modified by YANG Shouxun</span>
<span class="hl slc">% ----------------------------------------------------------------------</span>

<span class="hl kwa">functor</span>

<span class="hl kwa">import</span>
  <span class="hl kwd">System</span><span class="hl opt">(</span>showInfo<span class="hl opt">)</span> <span class="hl kwd">Application</span><span class="hl opt">(</span>exit<span class="hl opt">)</span> <span class="hl kwd">Open</span><span class="hl opt">(</span>file text<span class="hl opt">)</span>
  Regex <span class="hl kwa">at</span> 'x<span class="hl opt">-</span>oz<span class="hl opt">://</span>contrib<span class="hl opt">/</span>regex'

<span class="hl kwa">define</span>

<span class="hl slc">% ------------- %</span>

  VARIANTS <span class="hl opt">= [</span>
    <span class="hl str">&quot;agggtaaa|tttaccct&quot;</span> <span class="hl str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>
    <span class="hl str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span> <span class="hl str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>
    <span class="hl str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span> <span class="hl str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>
    <span class="hl str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span> <span class="hl str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>
    <span class="hl str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span><span class="hl opt">]</span>

  IUBS <span class="hl opt">= [</span><span class="hl str">&quot;B&quot;</span><span class="hl opt">#</span><span class="hl str">&quot;(c|g|t)&quot;</span> <span class="hl str">&quot;D&quot;</span><span class="hl opt">#</span><span class="hl str">&quot;(a|g|t)&quot;</span> <span class="hl str">&quot;H&quot;</span><span class="hl opt">#</span><span class="hl str">&quot;(a|c|t)&quot;</span> <span class="hl str">&quot;K&quot;</span><span class="hl opt">#</span><span class="hl str">&quot;(g|t)&quot;</span>
	  <span class="hl str">&quot;M&quot;</span><span class="hl opt">#</span><span class="hl str">&quot;(a|c)&quot;</span> <span class="hl str">&quot;N&quot;</span><span class="hl opt">#</span><span class="hl str">&quot;(a|c|g|t)&quot;</span> <span class="hl str">&quot;R&quot;</span><span class="hl opt">#</span><span class="hl str">&quot;(a|g)&quot;</span> <span class="hl str">&quot;S&quot;</span><span class="hl opt">#</span><span class="hl str">&quot;(c|g)&quot;</span>
	  <span class="hl str">&quot;V&quot;</span><span class="hl opt">#</span><span class="hl str">&quot;(a|c|g)&quot;</span> <span class="hl str">&quot;W&quot;</span><span class="hl opt">#</span><span class="hl str">&quot;(a|t)&quot;</span> <span class="hl str">&quot;Y&quot;</span><span class="hl opt">#</span><span class="hl str">&quot;(c|t)&quot;</span><span class="hl opt">]</span>

  LF <span class="hl opt">=</span> <span class="hl str">&quot;</span><span class="hl esc">\n</span><span class="hl str">&quot;</span>

<span class="hl slc">% ------------- %</span>

  <span class="hl kwa">class</span> TextFile_
    <span class="hl kwa">from</span> Open<span class="hl opt">.</span>file Open<span class="hl opt">.</span>text
  <span class="hl kwa">end</span>

<span class="hl slc">% ------------- %</span>

  Initial_Length Code_Length SEQ <span class="hl opt">= {</span>NewCell nil<span class="hl opt">}</span>

<span class="hl slc">% ------------- %</span>

<span class="hl kwa">in</span>
  <span class="hl slc">% Load file as a list and record its length</span>
  SEQ <span class="hl opt">:= {{</span>New TextFile_ <span class="hl kwd">init</span><span class="hl opt">(</span>name<span class="hl opt">:</span>stdin<span class="hl opt">)}</span> <span class="hl kwd">read</span><span class="hl opt">(</span>list<span class="hl opt">:</span>$ size<span class="hl opt">:</span>all<span class="hl opt">)}</span>
  Initial_Length <span class="hl opt">= {</span>Length <span class="hl opt">&#64;</span>SEQ<span class="hl opt">}</span>

  <span class="hl slc">% Remove newline and segment divider line occurrences</span>
  SEQ <span class="hl opt">:= {</span>Regex<span class="hl opt">.</span>replace <span class="hl opt">&#64;</span>SEQ <span class="hl opt">{</span>Regex<span class="hl opt">.</span>make <span class="hl str">&quot;(&gt;.*</span><span class="hl esc">\n</span><span class="hl str">)|(</span><span class="hl esc">\n</span><span class="hl str">)&quot;</span><span class="hl opt">}</span> <span class="hl kwa">fun</span> <span class="hl opt">{</span>$ X Y<span class="hl opt">}</span> <span class="hl str">&quot;&quot;</span> <span class="hl kwa">end</span><span class="hl opt">}</span>
  Code_Length <span class="hl opt">= {</span>ByteString<span class="hl opt">.</span>length <span class="hl opt">&#64;</span>SEQ<span class="hl opt">}</span>

  <span class="hl slc">% Perform regexp counts</span>
  <span class="hl kwa">for</span> Item <span class="hl kwa">in</span> VARIANTS <span class="hl kwa">do</span>
    <span class="hl opt">{</span>System<span class="hl opt">.</span>showInfo Item <span class="hl opt">#</span> <span class="hl str">&quot; &quot;</span> <span class="hl opt"># {</span>Length <span class="hl opt">{</span>Regex<span class="hl opt">.</span>allMatches <span class="hl opt">{</span>Regex<span class="hl opt">.</span>compile Item <span class="hl opt">[</span>icase extended<span class="hl opt">]} &#64;</span>SEQ<span class="hl opt">}}}</span>
  <span class="hl kwa">end</span>

  <span class="hl slc">% Perform replacements</span>
  <span class="hl kwa">for</span> Key<span class="hl opt">#</span>S <span class="hl kwa">in</span> IUBS <span class="hl kwa">do</span>
     SEQ <span class="hl opt">:= {</span>Regex<span class="hl opt">.</span>replace <span class="hl opt">&#64;</span>SEQ <span class="hl opt">{</span>Regex<span class="hl opt">.</span>compile Key <span class="hl opt">[</span>icase<span class="hl opt">]}</span> <span class="hl kwa">fun</span> <span class="hl opt">{</span>$ X Y<span class="hl opt">}</span> S <span class="hl kwa">end</span><span class="hl opt">}</span>
  <span class="hl kwa">end</span>

  <span class="hl slc">% Print statistics</span>
  <span class="hl opt">{</span>System<span class="hl opt">.</span>showInfo LF <span class="hl opt">#</span> Initial_Length <span class="hl opt">#</span> LF <span class="hl opt">#</span> Code_Length <span class="hl opt">#</span> LF <span class="hl opt"># {</span>ByteString<span class="hl opt">.</span>length <span class="hl opt">&#64;</span>SEQ<span class="hl opt">}}</span>

  <span class="hl opt">{</span>Application<span class="hl opt">.</span>exit <span class="hl num">0</span><span class="hl opt">}</span>
<span class="hl kwa">end</span>
