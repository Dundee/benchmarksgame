<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by </span>
<span class="hl com"> */</span>

use std<span class="hl opt">;</span>

fn <span class="hl kwd">eval_A</span><span class="hl opt">(</span>i<span class="hl opt">:</span> uint<span class="hl opt">,</span> j<span class="hl opt">:</span> uint<span class="hl opt">) -&gt;</span> <span class="hl kwb">float</span> <span class="hl opt">{</span>
   <span class="hl num">1.0</span><span class="hl opt">/(((</span>i<span class="hl opt">+</span>j<span class="hl opt">)*(</span>i<span class="hl opt">+</span>j<span class="hl opt">+</span><span class="hl num">1u</span><span class="hl opt">)/</span><span class="hl num">2u</span><span class="hl opt">+</span>i<span class="hl opt">+</span><span class="hl num">1u</span><span class="hl opt">)</span> as <span class="hl kwb">float</span><span class="hl opt">)</span>
<span class="hl opt">}</span>

fn <span class="hl kwd">eval_A_times_u</span><span class="hl opt">(</span>u<span class="hl opt">: ~[</span><span class="hl kwb">const float</span><span class="hl opt">],</span> Au<span class="hl opt">: ~[</span>mut <span class="hl kwb">float</span><span class="hl opt">]) {</span>
   let N <span class="hl opt">=</span> vec<span class="hl opt">::</span><span class="hl kwd">len</span><span class="hl opt">(</span>u<span class="hl opt">);</span>
   let mut i <span class="hl opt">=</span> <span class="hl num">0u</span><span class="hl opt">;</span>
   <span class="hl kwa">while</span> i <span class="hl opt">&lt;</span> N <span class="hl opt">{</span>
      Au<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
      let mut j <span class="hl opt">=</span> <span class="hl num">0u</span><span class="hl opt">;</span>
      <span class="hl kwa">while</span> j <span class="hl opt">&lt;</span> N <span class="hl opt">{</span>
         Au<span class="hl opt">[</span>i<span class="hl opt">] +=</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>i<span class="hl opt">,</span> j<span class="hl opt">) *</span> u<span class="hl opt">[</span>j<span class="hl opt">];</span>
         j <span class="hl opt">+=</span> <span class="hl num">1u</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      i <span class="hl opt">+=</span> <span class="hl num">1u</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

fn <span class="hl kwd">eval_At_times_u</span><span class="hl opt">(</span>u<span class="hl opt">: ~[</span><span class="hl kwb">const float</span><span class="hl opt">],</span> Au<span class="hl opt">: ~[</span>mut <span class="hl kwb">float</span><span class="hl opt">]) {</span>
   let N <span class="hl opt">=</span> vec<span class="hl opt">::</span><span class="hl kwd">len</span><span class="hl opt">(</span>u<span class="hl opt">);</span>
   let mut i <span class="hl opt">=</span> <span class="hl num">0u</span><span class="hl opt">;</span>
   <span class="hl kwa">while</span> i <span class="hl opt">&lt;</span> N <span class="hl opt">{</span>
      Au<span class="hl opt">[</span>i<span class="hl opt">] =</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
      let mut j <span class="hl opt">=</span> <span class="hl num">0u</span><span class="hl opt">;</span>
      <span class="hl kwa">while</span> j <span class="hl opt">&lt;</span> N <span class="hl opt">{</span>
         Au<span class="hl opt">[</span>i<span class="hl opt">] +=</span> <span class="hl kwd">eval_A</span><span class="hl opt">(</span>j<span class="hl opt">,</span> i<span class="hl opt">) *</span> u<span class="hl opt">[</span>j<span class="hl opt">];</span>
         j <span class="hl opt">+=</span> <span class="hl num">1u</span><span class="hl opt">;</span>
      <span class="hl opt">}</span>
      i <span class="hl opt">+=</span> <span class="hl num">1u</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>
<span class="hl opt">}</span>

fn <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span>u<span class="hl opt">: ~[</span><span class="hl kwb">const float</span><span class="hl opt">],</span> AtAu<span class="hl opt">: ~[</span>mut <span class="hl kwb">float</span><span class="hl opt">]) {</span>
   let v <span class="hl opt">=</span> vec<span class="hl opt">::</span><span class="hl kwd">to_mut</span><span class="hl opt">(</span>vec<span class="hl opt">::</span><span class="hl kwd">from_elem</span><span class="hl opt">(</span>vec<span class="hl opt">::</span><span class="hl kwd">len</span><span class="hl opt">(</span>u<span class="hl opt">),</span> <span class="hl num">0.0</span><span class="hl opt">));</span>
   <span class="hl kwd">eval_A_times_u</span><span class="hl opt">(</span>u<span class="hl opt">,</span> v<span class="hl opt">);</span>
   <span class="hl kwd">eval_At_times_u</span><span class="hl opt">(</span>v<span class="hl opt">,</span> AtAu<span class="hl opt">);</span>
<span class="hl opt">}</span>

fn <span class="hl kwd">main</span><span class="hl opt">(</span>args<span class="hl opt">: ~[</span>str<span class="hl opt">]) {</span>
   let N <span class="hl opt">=</span> uint<span class="hl opt">::</span><span class="hl kwd">from_str</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]).</span><span class="hl kwd">get</span><span class="hl opt">();</span>

   let u <span class="hl opt">=</span> vec<span class="hl opt">::</span><span class="hl kwd">to_mut</span><span class="hl opt">(</span>vec<span class="hl opt">::</span><span class="hl kwd">from_elem</span><span class="hl opt">(</span>N<span class="hl opt">,</span> <span class="hl num">1.0</span><span class="hl opt">));</span>
   let v <span class="hl opt">=</span> vec<span class="hl opt">::</span><span class="hl kwd">to_mut</span><span class="hl opt">(</span>vec<span class="hl opt">::</span><span class="hl kwd">from_elem</span><span class="hl opt">(</span>N<span class="hl opt">,</span> <span class="hl num">0.0</span><span class="hl opt">));</span>
   let mut i <span class="hl opt">=</span> <span class="hl num">0u</span><span class="hl opt">;</span>
   <span class="hl kwa">while</span> i <span class="hl opt">&lt;</span> <span class="hl num">10u</span> <span class="hl opt">{</span>
      <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span>u<span class="hl opt">,</span> v<span class="hl opt">);</span>
      <span class="hl kwd">eval_AtA_times_u</span><span class="hl opt">(</span>v<span class="hl opt">,</span> u<span class="hl opt">);</span>
      i <span class="hl opt">+=</span> <span class="hl num">1u</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   let mut vBv <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
   let mut vv <span class="hl opt">=</span> <span class="hl num">0.0</span><span class="hl opt">;</span>
   let mut i <span class="hl opt">=</span> <span class="hl num">0u</span><span class="hl opt">;</span>
   <span class="hl kwa">while</span> i <span class="hl opt">&lt;</span> N <span class="hl opt">{</span>
      vBv <span class="hl opt">+=</span> u<span class="hl opt">[</span>i<span class="hl opt">] *</span> v<span class="hl opt">[</span>i<span class="hl opt">];</span>
      vv <span class="hl opt">+=</span> v<span class="hl opt">[</span>i<span class="hl opt">] *</span> v<span class="hl opt">[</span>i<span class="hl opt">];</span>
      i <span class="hl opt">+=</span> <span class="hl num">1u</span><span class="hl opt">;</span>
   <span class="hl opt">}</span>

   io<span class="hl opt">::</span><span class="hl kwd">println</span><span class="hl opt">(</span><span class="hl ppc">#fmt(</span><span class="hl pps">&quot;%0.9f&quot;</span><span class="hl ppc">, float::sqrt(vBv / vv)));</span>
<span class="hl opt">}</span>
