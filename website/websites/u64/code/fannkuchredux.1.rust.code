<span class="hl com">/* The Computer Language Benchmarks Game</span>
<span class="hl com"> * http://shootout.alioth.debian.org/</span>
<span class="hl com"> *</span>
<span class="hl com"> * contributed by Brian Anderson</span>
<span class="hl com"> */</span>

<span class="hl kwc">extern</span> mod std<span class="hl opt">;</span>

fn <span class="hl kwd">fannkuch</span><span class="hl opt">(</span>n<span class="hl opt">:</span> <span class="hl kwb">int</span><span class="hl opt">) -&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">{</span>
    fn <span class="hl kwd">perm1init</span><span class="hl opt">(</span>i<span class="hl opt">:</span> uint<span class="hl opt">) -&gt;</span> <span class="hl kwb">int</span> <span class="hl opt">{</span> <span class="hl kwa">return</span> i as <span class="hl kwb">int</span><span class="hl opt">; }</span>

    let perm <span class="hl opt">=</span> vec<span class="hl opt">::</span><span class="hl kwd">to_mut</span><span class="hl opt">(</span>vec<span class="hl opt">::</span><span class="hl kwd">from_elem</span><span class="hl opt">(</span>n as uint<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">));</span>
    let perm1 <span class="hl opt">=</span> vec<span class="hl opt">::</span><span class="hl kwd">to_mut</span><span class="hl opt">(</span>vec<span class="hl opt">::</span><span class="hl kwd">from_fn</span><span class="hl opt">(</span>n as uint<span class="hl opt">, |</span>i<span class="hl opt">|</span> <span class="hl kwd">perm1init</span><span class="hl opt">(</span>i<span class="hl opt">)));</span>
    let count <span class="hl opt">=</span> vec<span class="hl opt">::</span><span class="hl kwd">to_mut</span><span class="hl opt">(</span>vec<span class="hl opt">::</span><span class="hl kwd">from_elem</span><span class="hl opt">(</span>n as uint<span class="hl opt">,</span> <span class="hl num">0</span><span class="hl opt">));</span>
    let mut f <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    let mut i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    let mut k <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    let mut r <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    let mut flips <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    let mut nperm <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    let mut checksum <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
    r <span class="hl opt">=</span> n<span class="hl opt">;</span>
    <span class="hl kwa">while</span> r <span class="hl opt">&gt;</span> <span class="hl num">0</span> <span class="hl opt">{</span>
        i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        <span class="hl kwa">while</span> r <span class="hl opt">!=</span> <span class="hl num">1</span> <span class="hl opt">{</span> count<span class="hl opt">[</span>r <span class="hl opt">-</span> <span class="hl num">1</span><span class="hl opt">] =</span> r<span class="hl opt">;</span> r <span class="hl opt">-=</span> <span class="hl num">1</span><span class="hl opt">; }</span>
        <span class="hl kwa">while</span> i <span class="hl opt">&lt;</span> n <span class="hl opt">{</span> perm<span class="hl opt">[</span>i<span class="hl opt">] =</span> perm1<span class="hl opt">[</span>i<span class="hl opt">];</span> i <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">; }</span>
        <span class="hl slc">// Count flips and update max and checksum</span>

        f <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
        k <span class="hl opt">=</span> perm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
        <span class="hl kwa">while</span> k <span class="hl opt">!=</span> <span class="hl num">0</span> <span class="hl opt">{</span>
            i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl kwa">while</span> <span class="hl num">2</span> <span class="hl opt">*</span> i <span class="hl opt">&lt;</span> k <span class="hl opt">{</span>
                let t <span class="hl opt">=</span> perm<span class="hl opt">[</span>i<span class="hl opt">];</span>
                perm<span class="hl opt">[</span>i<span class="hl opt">] =</span> perm<span class="hl opt">[</span>k <span class="hl opt">-</span> i<span class="hl opt">];</span>
                perm<span class="hl opt">[</span>k <span class="hl opt">-</span> i<span class="hl opt">] =</span> t<span class="hl opt">;</span>
                i <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl opt">}</span>
            k <span class="hl opt">=</span> perm<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
            f <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span>
        <span class="hl opt">}</span>
        <span class="hl kwa">if</span> f <span class="hl opt">&gt;</span> flips <span class="hl opt">{</span> flips <span class="hl opt">=</span> f<span class="hl opt">; }</span>
        <span class="hl kwa">if</span> nperm <span class="hl opt">&amp;</span> <span class="hl num">0x1</span> <span class="hl opt">==</span> <span class="hl num">0</span> <span class="hl opt">{</span> checksum <span class="hl opt">+=</span> f<span class="hl opt">; }</span> <span class="hl kwa">else</span> <span class="hl opt">{</span> checksum <span class="hl opt">-=</span> f<span class="hl opt">; }</span>
        <span class="hl slc">// Use incremental change to generate another permutation</span>

        let mut go <span class="hl opt">=</span> <span class="hl kwa">true</span><span class="hl opt">;</span>
        <span class="hl kwa">while</span> go <span class="hl opt">{</span>
            <span class="hl kwa">if</span> r <span class="hl opt">==</span> n <span class="hl opt">{</span>
                io<span class="hl opt">::</span><span class="hl kwd">println</span><span class="hl opt">(</span>fmt<span class="hl opt">!(</span><span class="hl str">&quot;%d&quot;</span><span class="hl opt">,</span> checksum<span class="hl opt">));</span>
                <span class="hl kwa">return</span> flips<span class="hl opt">;</span>
            <span class="hl opt">}</span>
            let p0 <span class="hl opt">=</span> perm1<span class="hl opt">[</span><span class="hl num">0</span><span class="hl opt">];</span>
            i <span class="hl opt">=</span> <span class="hl num">0</span><span class="hl opt">;</span>
            <span class="hl kwa">while</span> i <span class="hl opt">&lt;</span> r <span class="hl opt">{</span> let j <span class="hl opt">=</span> i <span class="hl opt">+</span> <span class="hl num">1</span><span class="hl opt">;</span> perm1<span class="hl opt">[</span>i<span class="hl opt">] =</span> perm1<span class="hl opt">[</span>j<span class="hl opt">];</span> i <span class="hl opt">=</span> j<span class="hl opt">; }</span>
            perm1<span class="hl opt">[</span>r<span class="hl opt">] =</span> p0<span class="hl opt">;</span>
            count<span class="hl opt">[</span>r<span class="hl opt">] -=</span> <span class="hl num">1</span><span class="hl opt">;</span>
            <span class="hl kwa">if</span> count<span class="hl opt">[</span>r<span class="hl opt">] &gt;</span> <span class="hl num">0</span> <span class="hl opt">{</span> go <span class="hl opt">=</span> <span class="hl kwa">false</span><span class="hl opt">; }</span> <span class="hl kwa">else</span> <span class="hl opt">{</span> r <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">; }</span>
        <span class="hl opt">}</span>
        nperm <span class="hl opt">+=</span> <span class="hl num">1</span><span class="hl opt">;</span>
    <span class="hl opt">}</span>
    <span class="hl kwa">return</span> flips<span class="hl opt">;</span>
<span class="hl opt">}</span>

fn <span class="hl kwd">main</span><span class="hl opt">() {</span>
    let args <span class="hl opt">=</span> os<span class="hl opt">::</span><span class="hl kwd">args</span><span class="hl opt">();</span>
    let n <span class="hl opt">=</span> <span class="hl kwb">int</span><span class="hl opt">::</span><span class="hl kwd">from_str</span><span class="hl opt">(</span>args<span class="hl opt">[</span><span class="hl num">1</span><span class="hl opt">]).</span><span class="hl kwd">get</span><span class="hl opt">();</span>
    io<span class="hl opt">::</span><span class="hl kwd">println</span><span class="hl opt">(</span>fmt<span class="hl opt">!(</span><span class="hl str">&quot;Pfannkuchen(%d) = %d&quot;</span><span class="hl opt">,</span> n<span class="hl opt">,</span> <span class="hl kwd">fannkuch</span><span class="hl opt">(</span>n<span class="hl opt">)));</span>
<span class="hl opt">}</span>
